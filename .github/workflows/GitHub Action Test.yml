name: Talent Atmos Web App CI/CD

on:
  push:
    branches: [develop, main, develop-did, production]
  pull_request:
    branches: [develop, develop-did]
  merge_group:
    types: [checks_requested]

jobs:
  build:
    if: ${{(github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/develop-did') }}

    # runs-on: ubuntu-latest -- only on ubuntu
    # - matrix.os: Specifies the operating systems to use. The matrix will
    #   run the job on each OS (ubuntu-latest, windows-latest, and macos-latest).
    # - runs-on: Dynamically uses the value from matrix.os to run on the specified platform.
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{secrets.GH_PAT}}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.10.0" # Your Node.js version
          cache: "npm"

      - name: Install dependencies
        run: npm install
        continue-on-error: true

      - name: Run tests
        id: test
        run: npm test
        env:
          NEXT_PUBLIC_S3_BUCKET1: ${{ secrets.NEXT_PUBLIC_S3_BUCKET1 }}
          NEXT_PUBLIC_S3_BUCKET2: ${{ secrets.NEXT_PUBLIC_S3_BUCKET2 }}
          NEXT_PUBLIC_S3_BUCKET3: ${{ secrets.NEXT_PUBLIC_S3_BUCKET3 }}
        continue-on-error: true

      - name: Check test result
        if: ${{ steps.test.outcome != 'success' }}
        run: echo "Test stage failed."
        id: test_failed # Marks the test as failed if this block executes

      - name: Build Next.js project
        id: build
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }} # API in Netlify || produciton mode
          NEXT_PUBLIC_GO_API_URL: ${{ secrets.NEXT_PUBLIC_GO_API_URL }} # API in development mode
          NEXT_PUBLIC_S3_BUCKET1: ${{ secrets.NEXT_PUBLIC_S3_BUCKET1 }}
          NEXT_PUBLIC_S3_BUCKET2: ${{ secrets.NEXT_PUBLIC_S3_BUCKET2 }}
          NEXT_PUBLIC_S3_BUCKET3: ${{ secrets.NEXT_PUBLIC_S3_BUCKET3 }}
        continue-on-error: true

      - name: Check build result
        if: ${{ steps.build.outcome != 'success' }}
        run: echo "Build stage failed."
        id: build_failed # Marks the build as failed if this block executes

    outputs:
      test_status: ${{ steps.test.outcome }}
      build_status: ${{ steps.build.outcome }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ needs.build.outputs.build_status == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{secrets.GH_PAT}}

      - name: Deploy to Netlify
        id: deploy
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: .next # Default Next.js build output
          production-branch: develop-did # Branch to deploy to Netlify || production mode !! Need to be changed in the future
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deployed from GitHub Actions ðŸš€"
          alias: production
          enable-pull-request-comment: true
        env:
          netlify-auth-token: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          netlify-site-id: ${{ secrets.NETLIFY_SITE_ID }}
        continue-on-error: true

    outputs:
      deploy_status: ${{ steps.deploy.outcome }}

  container_build_push:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: ${{ needs.build.outputs.build_status == 'success' && needs.build.outputs.test_status == 'success' }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME=ghcr.io/$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')
          TAG=latest
          COMMIT_HASH=${{ github.sha }}

          VERSION_TAG=$IMAGE_NAME:$COMMIT_HASH

          docker build -t $IMAGE_NAME:$TAG -t $VERSION_TAG .
          docker push $IMAGE_NAME:$TAG
          docker push $VERSION_TAG
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_GO_API_URL: ${{ secrets.NEXT_PUBLIC_GO_API_URL }}
          NEXT_PUBLIC_S3_BUCKET1: ${{ secrets.NEXT_PUBLIC_S3_BUCKET1 }}
          NEXT_PUBLIC_S3_BUCKET2: ${{ secrets.NEXT_PUBLIC_S3_BUCKET2 }}
          NEXT_PUBLIC_S3_BUCKET3: ${{ secrets.NEXT_PUBLIC_S3_BUCKET3 }}

      - name: Notify on Success
        if: ${{ steps.container_build_push.outcome == 'success' }}
        run: echo "Docker image successfully pushed to GitHub Container Registry"

  notify:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Send Discord notification
        run: |
          TEST_STATUS="${{ needs.build.outputs.test_status }}"
          BUILD_STATUS="${{ needs.build.outputs.build_status }}"
          DEPLOY_STATUS="${{ needs.deploy.outputs.deploy_status }}"

          if [ "$TEST_STATUS" != "success" ] && [ "$BUILD_STATUS" != "success" ] && [ "$DEPLOY_STATUS" != "success" ]; then
            STAGE="All"  
            STATUS="failed"
          elif [ "$TEST_STATUS" != "success" ]; then
            STAGE="Test"
            STATUS="failed"
          elif [ "$BUILD_STATUS" != "success" ]; then
            STAGE="Build"
            STATUS="failed"
          elif [ "$DEPLOY_STATUS" != "success" ]; then
            STAGE="Deploy"
            STATUS="failed"
          else
            STAGE="All"
            STATUS="success"
          fi

          MESSAGE=$(cat <<EOF
          {
            "username": "GitHub Actions",
            "embeds": [{
              "title": "Workflow $STATUS - $STAGE Stage",
              "description": "Workflow: **${{ github.workflow }}**\\nActor: ${{ github.actor }}\nGithub-Commit-Head: ${{ github.sha }}\nBranch: **${{ github.ref_name }}**\\nRepository: **${{ github.repository }}**\\nCommit-msg: ${{ github.event.head_commit.message }}\nStatus: $STATUS\n[View Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})",
              "color": $(if [ "$STATUS" == "success" ]; then echo "3066993"; else echo "15158332"; fi)
            }]
          }
          EOF
          )

          curl -X POST \
            -H "Content-Type: application/json" \
            -d "$MESSAGE" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

  # rollback:
  #   if: ${{ failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/develop-did')}}
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: Checkout code with full history
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0 # Ensures we have full history for rollback
  #         token: ${{secrets.GH_PAT}}

  #     # - name: Pull latest changes from remote # ensures that the local branch is up-to-date with the remote branch
  #     #   run: git pull origin ${{ github.ref }}

  #     - name: Rollback last commit
  #       run: |
  #         git reset --soft HEAD~1
  #         git push --force
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GH_PAT }}

  #     - name: Notify rollback
  #       run: echo "Build failed. Rolled back to previous commit."

  # deploy:
  #   if: github.ref == 'refs/heads/main'
  #   runs-on: ubuntu-latest
  #   needs: build  # Ensure deploy only runs if build succeeds

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #       with:
  #         token: ${{secrets.GH_PAT}}

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '20.10.0'

  #     - name: Install dependencies
  #       run: npm install

  #     - name: Build Next.js project
  #       run: npm run build

  #     - name: Install Netlify CLI
  #       run: npm install -g netlify-cli

  #     - name: Initializing deployment
  #       run: echo "Initializing deployment to Netlify..."

  # - name: Link to Netlify site
  #   run: |
  #     netlify link --site ${{ secrets.NETLIFY_SITE_ID }}
  #   env:
  #     NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

  # - name: Deploy to Netlify
  #   run: |
  #         netlify deploy --prod \
  #         --dir=.next \
  #         --functions=netlify/functions \
  #         --site ${{ secrets.NETLIFY_SITE_ID }}
  #   env:
  #     NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
  #     NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # - name: Post-processing after deployment
  #   run: echo "Deployment complete. Running post-processing steps..."

  # # final status
  # - name: Deployment complete
  #   run: echo "Deployment to Netlify is finished!"
